# GlobalFilter 接口具有与 GatewayFilter 接口相同的标签。这些特殊的过滤器，有条件的应用于所有的路由。
# 当请求与路由匹配时，过滤web处理器会将 GlobalFilter 的所有实例和该路由的所有 GatewayFilter 添加都过滤器链中。
# 这个组合的过滤器链按 org.springframework.core.Ordered 接口排序，你可以通过实现 getOrder() 方法来设置该接口。
# 由于 Spring Cloud Gateway 区分过滤器逻辑执行的 “pre” 和 “post” 阶段（参见其工作原理），优先级最高的过滤器是
# “pre” 阶段过滤器中的第一个，是 “post” 阶段过滤器中的最后一个。
spring:
  profiles:
    active: cors_configuration_route

---
##########  Combined Global Filter and GatewayFilter Ordering ##########
# 全局过滤器和网关过滤器组合排序
spring:
  profiles: custom_global_filter_route
  cloud:
    gateway:
      routes:
        - id: custom_global_filter_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-11T21:58:13.128+08:00[Asia/Shanghai]

---
##############  Forward Routing Filter   ##############
# ForwardRoutingFilter 在 exchange 的 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 属性中查找 URI。如果 URL 有一个
# forward 模式（例如 `forward:///localendpoint`），它将使用 Spring DispatcherHandler 来处理请求。请求 URL 的路径部分
# 被转发 URL 中的路径覆盖。未修改的原始 URL 会附加到 ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR 属性的列表中。
# 从 ForwardRoutingFilter 可以看出，里边还没实现好具体逻辑。

---
##############  The LoadBalancerClient Filter  ##############
# LoadBalancerClientFilter 在 exchange 的 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 属性中查找 URI。如果 URL 有一个 lb 方案
#（比如：lb://myservice），它使用 Spring Cloud LoadBalancerClient 将名称（在本例中是 fatal-service）解析为一个实际的主机和端口，
# 并替换该属性的 URI。未修改的原始 URL 被附加到 ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR 属性的列表中。过滤器还会
# 查看 ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR 属性是否等于 lb。如果是，则应用相同的规则。
# 注：该过滤已弃用，取而代之的是 ReactiveLoadBalancerClientFilter
# 下面的示例配置了一个 LoadBalancerClientFilter：
spring:
  profiles: load_balance_client_route
  cloud:
    gateway:
      routes:
        - id: load_balance_client_route
          # 服务名称不能带下划线，不然源码表达式匹配不了
          uri: lb://fatal-service
          # 测试 503 和 404
#          uri: lb://fatal-service2
          predicates:
            - Path=/service/**
      # 默认情况下，当在 LoadBalance 中找不到服务实例时，将返回 503。通过设置 spring.cloud.gateway.loadbalancer.use404=true，可以将网关配置为返回 404。
      loadbalancer:
        use404: true
# 我们来看下 LoadBalancerClientFilter 和 ReactiveLoadBalancerClientFilter 的自动配置类：
#  - org.springframework.cloud.gateway.config.GatewayLoadBalancerClientAutoConfiguration
#  - org.springframework.cloud.gateway.config.GatewayReactiveLoadBalancerClientAutoConfiguration
# 对比两边的相关配置信息，你可以发现 LoadBalancerClientFilter 是基于 RibbonAutoConfiguration 开启的，而 ReactiveLoadBalancerClientFilter
# 是基于 LoadBalancerAutoConfiguration 开启的。
# 结论：
#   - 负载均衡使用 Ribbon，那么对应使用 LoadBalancerClientFilter。
#   - 负载均衡使用 LoadBalancer，那么对应使用 ReactiveLoadBalancerClientFilter。
#   - 默认集成的是 Ribbon，所以这里用的是 LoadBalancerClientFilter。想要改成 LoadBalancer，看下个案例。

---
##############  The ReactiveLoadBalancerClientFilter  ##############
# ReactiveLoadBalancerClientFilter 在 exchange 的 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 属性中查找 URI。如果 URL 有一个 lb 方案
#（比如：lb://myservice），它使用 Spring Cloud ReactiveLoadBalancerClient 将名称（在本例中是 fatal-service）解析为一个实际的主机和端口，
# 并替换该属性的 URI。未修改的原始 URL 被附加到 ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR 属性的列表中。过滤器还会
# 查看 ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR 属性是否等于 lb。如果是，则应用相同的规则。
# 下面的示例配置了一个 ReactiveLoadBalancerClientFilter：
spring:
  profiles: reactive_load_balance_client_route
  cloud:
    gateway:
      routes:
        - id: reactive_load_balance_client_route
          uri: lb://fatal-service
          predicates:
            - Path=/service/**
      # 默认情况下，当在 ReactiveLoadBalance 中找不到服务实例时，将返回 503。通过设置 spring.cloud.gateway.loadbalancer.use404=true，可以将网关配置为返回 404。
      loadbalancer:
        use404: true
    # 关闭 Ribbon ，负载均衡组件实现换成 LoadBalancer
    loadbalancer:
      ribbon:
        enabled: false

---
##############  The Netty Routing Filter  ##############
# 如果位于 exchange 的 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 属性中的 URL 具有 “http” 或 “https” 方案，NettyRoutingFilter 就会
# 运行。它使用 Netty HttpClient 来发出下游代理请求，响应被放在 exchange 的 ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR 属性中， 在后面的
# 过滤器中使用。（还有一个实验性的 WebClientHttpRoutingFilter，它执行同样的功能，但不需要 Netty）

---
##############   The Netty Write Response Filter  ##############
# 如果 Netty HttpClientResponse 在 exchange 的 ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR 属性中，那么 NettyWriteResponseFilter 就会运行。
# 它在所有过滤器完成任务之后运行，并将代理响应写回网关客户端响应。（还有一个实验性的 WebClientWriteResponseFilter，它执行同样的功能，但不需要 Netty）

---
##############   The RouteToRequestUrl Filter   ##############
# 如果 exchange 的 ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR 属性中有 Route 对象，那么就会运行 RouteToRequestUrlFilter。它基于请求的 URI
# 创建一个新的 URI，并使用 Route 对象的 URI 对其进行更新，新的 URI 放在 exchange 的 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 属性中。
# 如果 URI 有个 scheme 前缀，比如 lb:ws://serviceid，那么 lb scheme 将从 URI 中剥离出来，并被放在 exchange 的
# ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR 属性中，在后面的过滤器中使用。

---
##############   The Websocket Routing Filter   ##############
# 如果位于 exchange 的 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 属性中的 URL 具有 “ws” 或 “wss” 方案，那么 WebsocketRoutingFilter 就会运行。
# 它使用了 Spring WebSocket 基础设施将 WebSocket 转发到下游。你可以用过在 URI 上添加前缀 lb（例如 lb:ws://serviceid） 实现 websockets 负载均衡。
# 如果使用 SockJS 作为普通 HTTP 的回退，则应该配置普通 HTTP路由 和 websocket路由。
# 下面的示例配置了一个 WebsocketRoutingFilter：
spring:
  profiles: sockjs_fallback_route
  cloud:
    gateway:
      routes:
        # SockJS route
        - id: websocket_sockjs_route
          uri: http://localhost:9090
          predicates:
            - Path=/websocket/info/**
        # Normal Websocket route
        - id: websocket_route
          uri: ws://localhost:9090
          predicates:
            - Path=/websocket/**
# 可以参考这个案例：https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-sample/src/main/resources/application.yml

---
###############   The Gateway Metrics Filter    ###############
# 要启用 Gateway Metrics（度量标准；指标），请添加 spring-boot-starter-actuator 依赖。然后，默认情况下，
# spring.cloud.gateway.metrics.enabled 设置为 true 时运行 Gateway Metrics Filter。此过滤器添加一个
# 名为 `gateway.requests` 的计时器指标。带有以下标签的请求：
#  - routeId: 路由ID
#  - routeUri: API 路由到的 URI
#  - outcome: 结果，按照 HttpStatus.Series 分类
#  - status: 返回客户端的请求的 HTTP 状态
#  - httpStatusCode: 返回客户端的请求的 HTTP 状态码
#  - httpMethod: HTTP 请求方式（GET，POST 之类的）
# 这些指标可以从 `/actuator/metrics/gateway.requests` 中取。可以很容易的和 Prometheus（普罗米修斯） 继承，从而创建一个
# Grafana 仪表盘。
# 注：要启用 Prometheus endpoint，请添加 micrometer-registry-prometheus 依赖。

---
###############   Marking An Exchange As Routed   ###############
# 在网关路由了一个 ServerWebExchange 之后，它通过将 gatewayAlreadyRouted  添加到 exchange 属性中，将
# 该 exchange 标记为 “routed”。一旦一个请求被标记为 “routed”，其它路由过滤器将不会再路由该请求，基本上跳过这些过滤器。
# 您可以使用一些方便的方法将 exchange 标记为 “routed” 或检查是否已经被路由。
#  - ServerWebExchangeUtils.isAlreadyRouted 接收一个 ServerWebExchange 对象，并检查是否已经被标记 “routed”
#  - ServerWebExchangeUtils.setAlreadyRouted 接收一个 ServerWebExchange 对象，并将其标记为 “routed”

---
######################    CORS Configuration    ######################
# 你可以通过配置网关来控制 CORS 行为。“全局” CORS 配置是 URL 模式到 Spring Framework CorsConfiguration 的映射。
# 下面的示例配置了 CORS：
spring:
  profiles: cors_configuration_route
  cloud:
    gateway:
      routes:
        - id: cors_configuration_route
          uri: http://localhost:9090
          predicates:
            - Path=/cors
      globalcors:
        cors-configurations:
          '[/**]':
            maxAge: 10
            allowedOrigins: "*"
            allowedMethods:
              - GET
# 在本示例中，CORS 请求允许来自任所有域的所有 GET 请求路径。要为某些网关路由谓词未处理的请求 提供相同的 CORS 配置，
# 请设置 spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping 为 true。
# - '[/**]'： path pattern（路径模式），/** 为路径模式值。
# - maxAge：客户端可以缓存 pre-flight 请求响应的持续时间。
# - allowedOrigins：设置允许的起源，如："https://domain1.com"。
#                   特殊值"*"允许所有域。
# - allowedMethods：设置 HTTP 方法，例如允许 "GET" "POST" "PUT" 等等。
#                   特殊值"*"允许所有方法。
#                   默认只有"GET"和"HEAD"是允许的。
