# 路由过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应。路由过滤器的作用域是特定的路由。
# Spring Cloud Gateway 包含了许多内置的 GatewayFilter Factory（网关过滤器工厂）。
# 有关如何使用下面过滤器的更详细示例，请参考单元测试 -> https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-core/src/test/java/org/springframework/cloud/gateway/filter/factory
spring:
  profiles:
    active: dedupe_response_header_route

---
##########   The AddRequestHeader GatewayFilter Factory   ##########
# AddRequestHeader GatewayFilter Factory 接收两个参数：name 和 value。
# 下面的示例配置了一个 AddRequestHeader GatewayFilter：
spring:
  profiles: add_request_header_route
  cloud:
    gateway:
      routes:
        - id: add_request_header_route
          uri: http://httpbin.org:80
          # 注意：filters 不能单独使用，必须在有 predicates 的前提下。参考属性标注的注解：org.springframework.cloud.gateway.route.RouteDefinition.predicates
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddRequestHeader=X-Request-Red, blue

---
# AddRequestHeader 可以用于识别匹配 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddRequestHeader GatewayFilter：
spring:
  profiles: add_request_header_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_request_header_route_with_variable
          uri: http://localhost:9090
          predicates:
            - Path=/red/{segment}
          filters:
            - AddRequestHeader=X-Request-Red, Blue-{segment}

---
##########   The AddRequestParameter GatewayFilter Factory   ##########
# AddRequestParameter GatewayFilter Factory 接收一个参数名和一个参数值。下面的示例配置了一个 AddRequestParameter GatewayFilter：
spring:
  profiles: add_request_parameter_route
  cloud:
    gateway:
      routes:
        - id: add_request_parameter_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddRequestParameter=color, blue
            - AddRequestParameter=name, fatal

---
# AddRequestParameter 可以用于识别 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddRequestParameter GatewayFilter：
spring:
  profiles: add_request_parameter_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_request_parameter_route_with_variable
          uri: http://httpbin.org:80
          predicates:
            - Host=www.{segment}.com
          filters:
            - AddRequestParameter=name, {segment}

---
##########   The AddResponseHeader GatewayFilter Factory   ##########
# AddResponseHeader GatewayFilter Factory 接收一个参数名和一个参数值。
# 下面的示例配置了一个 AddResponseHeader GatewayFilter：
spring:
  profiles: add_response_header_route
  cloud:
    gateway:
      routes:
        - id: add_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddResponseHeader=X-Response-Red, Blue

---
# AddResponseHeader 可以用于识别 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddResponseHeader GatewayFilter：
spring:
  profiles: add_response_header_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_response_header_route_with_variable
          uri: http://httpbin.org:80
          predicates:
            - Host=www.{segment}.com
          filters:
            - AddResponseHeader=name, {segment}

---
##########   The DedupeResponseHeader GatewayFilter Factory   ##########
# DedupeResponseHeader GatewayFilter 接收一个名称参数和一个可选的策略参数。name 可以包含一个以空格分隔的标题名称列表。
# 下面的示例配置了一个 DedupeResponseHeader GatewayFilter：
spring:
  profiles: dedupe_response_header_route
  cloud:
    gateway:
      routes:
        - id: dedupe_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin, RETAIN_FIRST
# DedupeResponseHeader 过滤器还接受一个可选的策略参数。接受的值是 RETAIN_FIRST(默认)、RETAIN_LAST 和 RETAIN_UNIQUE。