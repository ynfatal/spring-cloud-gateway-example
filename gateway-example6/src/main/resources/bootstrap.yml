# 路由过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应。路由过滤器的作用域是特定的路由。
# Spring Cloud Gateway 包含了许多内置的 GatewayFilter Factory（网关过滤器工厂）。
# 有关如何使用下面过滤器的更详细示例，请参考单元测试 -> https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-core/src/test/java/org/springframework/cloud/gateway/filter/factory
spring:
  profiles:
    active: dedupe_response_header_route

---
##########   The AddRequestHeader GatewayFilter Factory   ##########
# AddRequestHeader GatewayFilter Factory 接收两个参数：name 和 value。
# 下面的示例配置了一个 AddRequestHeader GatewayFilter：
spring:
  profiles: add_request_header_route
  cloud:
    gateway:
      routes:
        - id: add_request_header_route
          uri: http://httpbin.org:80
          # 注意：filters 不能单独使用，必须在有 predicates 的前提下。参考属性标注的注解：org.springframework.cloud.gateway.route.RouteDefinition.predicates
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddRequestHeader=X-Request-Red, blue

---
# AddRequestHeader 可以用于识别匹配 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddRequestHeader GatewayFilter：
spring:
  profiles: add_request_header_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_request_header_route_with_variable
          uri: http://localhost:9090
          predicates:
            - Path=/red/{segment}
          filters:
            - AddRequestHeader=X-Request-Red, Blue-{segment}

---
##########   The AddRequestParameter GatewayFilter Factory   ##########
# AddRequestParameter GatewayFilter Factory 接收一个参数名和一个参数值。下面的示例配置了一个 AddRequestParameter GatewayFilter：
spring:
  profiles: add_request_parameter_route
  cloud:
    gateway:
      routes:
        - id: add_request_parameter_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddRequestParameter=color, blue
            - AddRequestParameter=name, fatal

---
# AddRequestParameter 可以用于识别 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddRequestParameter GatewayFilter：
spring:
  profiles: add_request_parameter_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_request_parameter_route_with_variable
          uri: http://httpbin.org:80
          predicates:
            - Host=www.{segment}.com
          filters:
            - AddRequestParameter=name, {segment}

---
##########   The AddResponseHeader GatewayFilter Factory   ##########
# AddResponseHeader GatewayFilter Factory 接收一个参数名和一个参数值。
# 下面的示例配置了一个 AddResponseHeader GatewayFilter：
spring:
  profiles: add_response_header_route
  cloud:
    gateway:
      routes:
        - id: add_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddResponseHeader=X-Response-Red, Blue

---
# AddResponseHeader 可以用于识别 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddResponseHeader GatewayFilter：
spring:
  profiles: add_response_header_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_response_header_route_with_variable
          uri: http://httpbin.org:80
          predicates:
            - Host=www.{segment}.com
          filters:
            - AddResponseHeader=name, {segment}

---
##########   The DedupeResponseHeader GatewayFilter Factory   ##########
# DedupeResponseHeader GatewayFilter 接收一个名称参数和一个可选的策略参数。name 可以包含一个以空格分隔的标题名称列表。
# 下面的示例配置了一个 DedupeResponseHeader GatewayFilter：
spring:
  profiles: dedupe_response_header_route
  cloud:
    gateway:
      routes:
        - id: dedupe_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin, RETAIN_FIRST
# DedupeResponseHeader 过滤器还接受一个可选的策略参数。接受的值是 RETAIN_FIRST(默认)、RETAIN_LAST 和 RETAIN_UNIQUE。
# Configuration parameters:
#  - name
#      String representing response header names, space separated. Required.
#  - strategy
#  	RETAIN_FIRST - 默认，仅保留第一个值。
#  	RETAIN_LAST - 保留最后一个值。
#  	RETAIN_UNIQUE - 按首次遇到的顺序保留所有唯一值。（可以有多个但是都是唯一）
# 详细可以参考：org.springframework.cloud.gateway.filter.factory.DedupeResponseHeaderGatewayFilterFactory 类上的注释
# 里边还有例子，可以帮助理解。

---
#################   The Hystrix GatewayFilter Factory   #################
# 官网：Netflix 已经将 Hystrix 置于维护状态。我们建议您在 Resilience4J 中使用 Spring Cloud 断路器网关过滤器，因此对 Hystrix 的支持将在未来的版本中删除。
# 要在项目中启用 Hystrix GatewayFilter 实例，请添加 spring-cloud-starter-netflix-hystrix 的依赖。
# Hystrix GatewayFilter Factory 接收一个名称参数，即 HystrixCommand 的名称。Hystrix 过滤器还可以接受一个可选的fallbackUri参数。
# 目前，只支持转发:策划好的 uri。如果调用回退，则请求被转发到与URI匹配的控制器。
# 下面的示例配置了一个 Hystrix GatewayFilter：
spring:
  profiles: hystrix_route
  cloud:
    gateway:
      routes:
        - id: hystrix_route
          # 负载均衡参考 7.3 -> https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#the-loadbalancerclient-filter
          uri: lb://backing-service:8088
          predicates:
            - Path=/consumingserviceendpoint
          filters:
            - name: Hystrix
              args:
                name: fallbackcmd
                fallbackUri: forward:/incaseoffailureusethis
# 当 Hystrix 回退被调用时，它将转发到 /incaseoffailureusethis URI。注意，这个示例还演示了（可选的）Spring Cloud Netflix Ribbon
# 负载均衡（在目标 URI 上定义 lb 前缀）。
# 更多示例请看官网