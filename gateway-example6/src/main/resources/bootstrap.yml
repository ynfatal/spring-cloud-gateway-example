# 路由过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应。路由过滤器的作用域是特定的路由。
# Spring Cloud Gateway 包含了许多内置的 GatewayFilter Factory（网关过滤器工厂）。具体功能可以找相关的工厂类看看。
# 有关如何使用下面过滤器的更详细示例，请参考单元测试 -> https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-core/src/test/java/org/springframework/cloud/gateway/filter/factory
spring:
  profiles:
    active: rewrite_location_response_header_route

---
##########   The AddRequestHeader GatewayFilter Factory   ##########
# AddRequestHeader GatewayFilter Factory 接收两个参数：name 和 value。
# 下面的示例配置了一个 AddRequestHeader GatewayFilter：
spring:
  profiles: add_request_header_route
  cloud:
    gateway:
      routes:
        - id: add_request_header_route
          uri: http://httpbin.org:80
          # 注意：filters 不能单独使用，必须在有 predicates 的前提下。参考属性标注的注解：org.springframework.cloud.gateway.route.RouteDefinition.predicates
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddRequestHeader=X-Request-Red, blue

---
# AddRequestHeader 可以用于识别匹配 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddRequestHeader GatewayFilter：
spring:
  profiles: add_request_header_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_request_header_route_with_variable
          uri: http://localhost:9090
          predicates:
            - Path=/red/{segment}
          filters:
            - AddRequestHeader=X-Request-Red, Blue-{segment}

---
##########   The AddRequestParameter GatewayFilter Factory   ##########
# AddRequestParameter GatewayFilter Factory 接收一个参数名和一个参数值。下面的示例配置了一个 AddRequestParameter GatewayFilter：
spring:
  profiles: add_request_parameter_route
  cloud:
    gateway:
      routes:
        - id: add_request_parameter_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddRequestParameter=color, blue
            - AddRequestParameter=name, fatal

---
# AddRequestParameter 可以用于识别 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddRequestParameter GatewayFilter：
spring:
  profiles: add_request_parameter_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_request_parameter_route_with_variable
          uri: http://httpbin.org:80
          predicates:
            - Host=www.{segment}.com
          filters:
            - AddRequestParameter=name, {segment}

---
##########   The AddResponseHeader GatewayFilter Factory   ##########
# AddResponseHeader GatewayFilter Factory 接收一个参数名和一个参数值。
# 下面的示例配置了一个 AddResponseHeader GatewayFilter：
spring:
  profiles: add_response_header_route
  cloud:
    gateway:
      routes:
        - id: add_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - AddResponseHeader=X-Response-Red, Blue

---
# AddResponseHeader 可以用于识别 Path 或 Host 中的 URI变量。URI变量可以在值中使用，并在运行时展开。
# 下面的示例配置了一个使用变量的 AddResponseHeader GatewayFilter：
spring:
  profiles: add_response_header_route_with_variable
  cloud:
    gateway:
      routes:
        - id: add_response_header_route_with_variable
          uri: http://httpbin.org:80
          predicates:
            - Host=www.{segment}.com
          filters:
            - AddResponseHeader=name, {segment}

---
##########   The DedupeResponseHeader GatewayFilter Factory   ##########
# DedupeResponseHeader GatewayFilter 接收一个名称参数和一个可选的策略参数。name 可以包含一个以空格分隔的标题名称列表。
# 下面的示例配置了一个 DedupeResponseHeader GatewayFilter：
spring:
  profiles: dedupe_response_header_route
  cloud:
    gateway:
      routes:
        - id: dedupe_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-06T05:22:13.128+08:00[Asia/Shanghai]
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin, RETAIN_FIRST
# DedupeResponseHeader 过滤器还接受一个可选的策略参数。接受的值是 RETAIN_FIRST(默认)、RETAIN_LAST 和 RETAIN_UNIQUE。
# Configuration parameters:
#  - name
#      String representing response header names, space separated. Required.
#  - strategy
#  	RETAIN_FIRST - 默认，仅保留第一个值。
#  	RETAIN_LAST - 保留最后一个值。
#  	RETAIN_UNIQUE - 按首次遇到的顺序保留所有唯一值。（可以有多个但是都是唯一）
# 详细可以参考：org.springframework.cloud.gateway.filter.factory.DedupeResponseHeaderGatewayFilterFactory 类上的注释
# 里边还有例子，可以帮助理解。

---
#################   The Hystrix GatewayFilter Factory   #################
# 官网：Netflix 已经将 Hystrix 置于维护状态。我们建议您在 Resilience4J 中使用 Spring Cloud 断路器网关过滤器，因此对 Hystrix 的支持将在未来的版本中删除。
# 要在项目中启用 Hystrix GatewayFilter 实例，请添加 spring-cloud-starter-netflix-hystrix 的依赖。
# Hystrix GatewayFilter Factory 接收一个名称参数，即 HystrixCommand 的名称。Hystrix 过滤器还可以接受一个可选的fallbackUri参数。
# 目前，只支持转发:策划好的 uri。如果调用回退，则请求被转发到与URI匹配的控制器。
# 下面的示例配置了一个 Hystrix GatewayFilter：
spring:
  profiles: hystrix_route
  cloud:
    gateway:
      routes:
        - id: hystrix_route
          # 指定一个不存在的服务实例
          uri: http://localhost:8787
          predicates:
            - Path=/consumingserviceendpoint
          filters:
            - name: Hystrix
              args:
                name: fallbackcmd
                fallbackUri: forward:/incaseoffailureusethis
# 当 Hystrix 回退被调用时，它将转发到 /incaseoffailureusethis URI。
# 更多示例请看官网

---
############## Spring Cloud CircuitBreaker GatewayFilter Factory ##############
# Spring Cloud CircuitBreaker GatewayFilter Factory 使用 Spring Cloud CircuitBreaker APIs 将网关路由封装在
# 断路器中。Spring Cloud CircuitBreaker 支持两个能与 Spring Cloud Gateway 一起使用的库：Hystrix 和 Resilience4J。
# Netflix 已经将 Hystrix 置于仅维护模式，所以我们建议您使用 Resilience4J。
# 要启用 Spring Cloud CircuitBreaker filter，需要在类路径上放 spring-cloud-starter-circuitbreaker-reactor-resilience4j
# 或者 spring-cloud-starter-netflix-hystrix。
# 下面的示例配置类一个 Spring Cloud CircuitBreaker：
spring:
  profiles: circuit_breaker_route
  cloud:
    gateway:
      routes:
        - id: circuit_breaker_route
          uri: http://localhost:8787
          predicates:
            - Path=/consumingserviceendpoint
          filters:
            - name: CircuitBreaker
              args:
                name: myCircuitBreaker
                # 如果调用回退，则请求被转发到与URI(/incaseoffailureusethis)匹配的控制器。
                fallbackUri: forward:/incaseoffailureusethis

---
##############  The FallbackHeaders GatewayFilter Factory ##############
# FallbackHeaders Factory 允许您在转发到外部应用程序的 fallbackUri 的请求头中添加 Hystrix 或
# Spring Cloud CircuitBreaker 的执行异常细节。如下面的场景：
spring:
  profiles: fallback_headers_route
  cloud:
    gateway:
      routes:
        - id: ingredients
          uri: http://localhost:8787
          predicates:
          - Path=/ingredients/**
          filters:
            - name: CircuitBreaker
              args:
                name: fetchIngredients
                fallbackUri: forward:/fallback
        - id: ingredients_fallback
          uri: http://localhost:9090
          predicates:
            - Path=/fallback
          filters:
            - name: FallbackHeaders
              args:
                executionExceptionTypeHeaderName: Test-Header
# 在本例中，在运行时断路器发送执行异常后，请求会先被转发到 localhost:8080/fallback，再被路由到 localhost:9090/fallback。

---
##############  The MapRequestHeader GatewayFilter Factory ##############
# MapRequestHeader GatewayFilter Factory 接收两个参数：fromHeader 和 toHeader。它会创建一个新的命名的请求头（toHeader），
# 并从传入的 HTTP 请求的现有命名请求头（fromHeader）中取值。如果输入的命名请求头（指新的）不存在，过滤器不会受影响；如果存在，则使用
# 新增覆盖旧值。MapRequestHeader 的 map 定义和 java8 的 map 一样，可以理解为改造者嘛。
# 1. fromHeader 不存在，直接跳过，不走逻辑（不影响使用）。
# 2. toHeader 不存在，则结果会多一个 header；如果已经存在，新值覆盖旧值（以拼接的方式，使用逗号将新旧值分开）。
# 具体逻辑请参考源码：org.springframework.cloud.gateway.filter.factory.MapRequestHeaderGatewayFilterFactory.apply
# 下面的示例配置了一个 MapRequestHeader GatewayFilter:
spring:
  profiles: map_request_header_route
  cloud:
    gateway:
      routes:
        - id: map_request_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-08T05:15:13.128+08:00[Asia/Shanghai]
          filters:
            - MapRequestHeader=Blue, X-Request-Red # fromHeader 不存在
            - MapRequestHeader=Host, X-Request-Red # fromHeader 存在，toHeader 不存在
            - MapRequestHeader=Accept, User-Agent # fromHeader 存在，toHeader 存在

---
##############  The PrefixPath GatewayFilter Factory ##############
# PrefixPath GatewayFilter 接收一个前缀参数。下面的示例配置了一个 PrefixPath GatewayFilter：
spring:
  profiles: prefix_path_route
  cloud:
    gateway:
      routes:
        - id: prefix_path_route
          uri: http://localhost:9090
          predicates:
            - After=2020-07-08T05:15:13.128+08:00[Asia/Shanghai]
          filters:
            - PrefixPath=/mypath
# 会为进入该路由的请求添加前缀 /mypath，例如：http://localhost:8080/hello -> http://localhost:8080/mypath/hello

---
##############  The PreserveHostHeader GatewayFilter Factory  ##############
# PreserveHostHeader GatewayFilter Factory 没有参数。此过滤器设置一个路由过滤器检查的请求属性，以确定是否应该发送
# 原始 host header，而不是 HTTP 客户端确定的 host header。（默认 true，没得选）
# 不理解的话看源码 org.springframework.cloud.gateway.filter.factory.PreserveHostHeaderGatewayFilterFactory.apply(java.lang.Object)
# 下面的示例配置了一个 PreserveHostHeader GatewayFilter：
spring:
  profiles: preserve_host_header_route
  cloud:
    gateway:
      routes:
        - id: preserve_host_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-08T05:15:13.128+08:00[Asia/Shanghai]
          filters:
            - PreserveHostHeader

---
##############  The RequestRateLimiter GatewayFilter Factory  ##############
# RequestRateLimiter GatewayFilter Factory 使用 RateLimiter 来确定当前请求是否允许继续。如果不允许，则默认返回 429（过多请求） 状态码。
# 此过滤器接收一个可选参的 keyResolver参数 和 针对限制速率器的参数。（后面将描述）
# keyResolver 是一个实现 KeyResolver 接口的 bean。在配置中，使用 SpELl 表达式按名称引用 bean。`#{@mykeysolver}` 是一个引用名为 mykeysolver 的 bean 的 SpEL 表达式。
# KeyResolver 接口允许可插拔策略获得用于限制请求的密钥。在为了的里程碑版本中，将有一些 keyResolver 实现。
# KeyResolver 的默认实现是 PrincipalNameKeyResolver，它从 ServerWebExchange 检索 Principal 并调用 Principal.getName()。
#   默认情况下，如果 keyResolver 找不到密钥，那么拒绝请求（返回 429）。可以通过设置 spring.cloud.gateway.filter.request-rate-limiter.deny-empty-key (true or false)
#   和 spring.cloud.gateway.filter.request-rate-limiter.empty-key-status-code 来调整这种行为。
# 下面的示例是无效的配置方式，RequestRateLimiter 不支持快捷配置。
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: invalid_shortcut_configuration
#          filters:
#            RequestRateLimiter=2, 2, #{@userkeyresolver}
##################    The Redis RateLimiter  ###################
# RedisRateLimiter 的实现是基于 Stripe 完成的工作。它需要使用 `spring-boot-starter-data-redis-reactive` Spring Boot 启动器。
# 使用的算法是令牌通算法。参数含义如下：
# replenish-rate：允许用户每秒执行的请求数，而不删除任何请求。这是填充令牌桶的速率。
# burst-capacity：允许用户在一秒内执行的最大请求数。这是令牌桶可以容纳的令牌数，将此值设置为 0 可以阻止所有请求。
# requested-tokens：请求花费的令牌数。这是每个请求从桶中获取的令牌数，默认为 1。
# 设置 replenishRate 和 burstCapacity 具有相同的值可以实现稳定的速率。设置 burstCapacity 的值设高于 replenishRate 可以允许临时爆发。
# 在这种情况下，速率限制器需要在突发之间留出一段时间（根据 replenishRate），因为两个连续的突发将导致部分请求丢失（HTTP 429 - 请求太多）。
# 设置三个属性为 replenishRate=1, requestedTokens=60 和 burstCapacity=60 将导致每秒只能执行一个请求。
# 配置的书写方法可以参考：
#  - https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#the-requestratelimiter-gatewayfilter-factory
#  - https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/test/resources/application-redis-rate-limiter-config.yml
# 下面的示例配置了一个 redis-rate-limiter：
spring:
  profiles: request_rate_limiter_route
  cloud:
    gateway:
      routes:
        - id: request_rate_limiter_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-09T05:36:13.128+08:00[Asia/Shanghai]
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenish-rate: 1
                  burst-capacity: 60
                  requested-tokens: 60
                # 使用 SpEL 表达式从 Spring 容器中获取引用名为 pathKeyResolver 的 bean
                key-resolver: "#{@pathKeyResolver}"
#                rate-limiter: "#{@redisRateLimiter}"  # 配置类和全局配置文件两种方式二选一
  redis:
    host: localhost
    password: 123456
# 这定义了每个用户被允许每秒执行 1 个请求。允许突发 60 个，但在接下来的 1 秒内，只有 1 个请求可用。
# 相关类可以看这里：
# - org.springframework.cloud.gateway.config.GatewayRedisAutoConfiguration
# - org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter
# 执行的 Redis LUA 脚本文件为：request_rate_limiter。（复制文件名双击 Shift 键即可找到位置）

---
##############  The RedirectTo GatewayFilter Factory  ##############
# RedirectTo GatewayFilter Factory 接收两个参数：status 和 url。status 参数应该是 300 系列的重定向状态码，例如 301。url 参数
# 应该是一个有效的 url。对于重定向，应该使用 `uri: no://op` 作为重定向的 uri。
# 下面的示例配置了一个 RedirectTo GatewayFilter：
spring:
  profiles: redirect_to_route
  cloud:
    gateway:
      routes:
        - id: redirect_to_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-09T08:29:13.128+08:00[Asia/Shanghai]
          filters:
            - RedirectTo=302, http://localhost:8080/request-to

---
##############  The RemoveRequestHeader GatewayFilter Factory  ##############
# RemoveRequestHeader GatewayFilter Factory 接收一个参数，它是要删除的 header 的名称。
# 下面的示例配置了一个 RemoveRequestHeader GatewayFilter：
spring:
  profiles: remove_request_header_route
  cloud:
    gateway:
      routes:
        - id: remove_request_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-09T09:17:13.128+08:00[Asia/Shanghai]
          filters:
            - RemoveRequestHeader=X-Request-Foo
            - RemoveRequestHeader=Accept-Encoding
# 在发送到下游之前删除 X-Request-Foo 和 Accept-Encoding 两个 header。
# 注：只能删除上游的，可以 debug 方法 org.springframework.cloud.gateway.filter.GatewayFilter.filter 看看，exchange -> request -> headers。
# 不过有部分是默认的 header，删了也会被加回来，例如 Accept。

---
##############  The RemoveResponseHeader GatewayFilter Factory  ##############
# RemoveResponseHeader GatewayFilter Factory 接收一个参数，它表示要删除的 header 的名称。
# 下面的示例配置了一个 RemoveResponseHeader GatewayFilter：
spring:
  profiles: remove_response_header_route
  cloud:
    gateway:
      routes:
        - id: remove_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-09T09:17:13.128+08:00[Asia/Shanghai]
          filters:
            - RemoveResponseHeader=X-Response-Foo
            - RemoveResponseHeader=Content-Length
# 在将 Response Header 返回给 Gateway Client 之前删除 X-Response-Foo 和 Content-Length 两个 header。
# 若要删除任何敏感的 header，你应该为 所有你可能想要执行该操作的 route 配置这个过滤器。此外，你可以通过 spring.cloud.gateway.default-filters 配置
# filter 来将它应用于所有的 route。

---
##############  The RemoveRequestParameter GatewayFilter Factory  ##############
# RemoveRequestParameter GatewayFilter Factory 接收一个参数，它表示要删除的参数的名称。
# 下面的示例配置了一个 RemoveRequestParameter GatewayFilter：
spring:
  profiles: remove_request_parameter_route
  cloud:
    gateway:
      routes:
        - id: remove_request_parameter_route
          uri: http://localhost:9090
          predicates:
            - After=2020-07-09T09:17:13.128+08:00[Asia/Shanghai]
          filters:
            - RemoveRequestParameter=name

---
##############  The RewritePath GatewayFilter Factory  ##############
# RewritePath GatewayFilter Factory 接收一个 路径regexp参数 和一个 替换参数。它使用 Java正则表达式 灵活地
# 重写请求路径。下面的示例配置了一个 RewritePath GatewayFilter：
spring:
  profiles: rewrite_path_route
  cloud:
    gateway:
      routes:
        - id: rewrite_path_route
          uri: http://localhost:9090
          predicates:
            - Path=/foo/**
          filters:
            - RewritePath=/red(?<segment>/?.*), $\{segment}
# 对于 /red/blue 的请求路径，该路由会在发出下游请求之前将路径改为 /blue。注意，由于 yaml 的规范，$ 应该替换为 $\。

---
##############  The RewriteLocationResponseHeader GatewayFilter Factory  ##############
# RewriteLocationResponseHeader GatewayFilter Factory 修改 Location 响应头的值，通常是为了除去后端特定的详细信息。它接收 stripVersionMode，
# locationHeaderName，hostValue 和 protocolsRegex 四个参数。
#  - stripVersionMode 参数的值可以是 NEVER_STRIP，AS_IN_REQUEST（默认）和 ALWAYS_STRIP。
#      NEVER_STRIP：即使原请求的路径不包含版本，也不会剥离版本。
#      AS_IN_REQUEST：只有原请求的路径不包含版本时，才会剥离版本。
#      ALWAYS_STRIP：版本始终被剥离，即使原请求的路径包含版本。
#  - locationHeaderName：表示自定义的 Location header 名称。默认：Location。
#  - hostValue：一个字符串。如果提供，将用于替换响应中 Location header 的 host:port 部分。默认：请求中 Host header 的值用于替换。
#  - protocolsRegex：一个有效的正则表达式字符串，协议名称必须与之匹配。如果不匹配，则过滤器不执行任何操作。默认值为 http|https|ftp|ftps。
# 下面的示例配置了一个 RewriteLocationResponseHeader GatewayFilter：
spring:
  profiles: rewrite_location_response_header_route
  cloud:
    gateway:
      routes:
        - id: rewrite_location_response_header_route
          uri: http://httpbin.org:80
          predicates:
            - After=2020-07-09T09:17:13.128+08:00[Asia/Shanghai]
          filters:
            - RewriteLocationResponseHeader=AS_IN_REQUEST, Location, ,
# 例如，对于 POST 请求 api.example.com/some/object/name，那么响应中 Location Header 的值 object-service.prod.example.net/v2/some/object/id
# 会被重写为 api.example.com/some/object/id。
# 详细案例可以参考：org.springframework.cloud.gateway.filter.factory.RewriteLocationResponseHeaderGatewayFilterFactory 类上的注释

















